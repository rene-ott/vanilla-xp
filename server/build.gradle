plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "io.freefair.lombok" version "5.3.0"
	id 'java'
}

group = 'rscvanilla.xp'
version = '0.0.1'
sourceCompatibility = "11"
targetCompatibility = "11"

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:2.4.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.2'
	implementation 'org.postgresql:postgresql:42.2.18'
	implementation "org.jsoup:jsoup:1.13.1"
	implementation "commons-validator:commons-validator:1.7"
	implementation "com.google.guava:guava:30.1-jre"
	implementation "org.modelmapper:modelmapper:2.3.9"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf:2.4.2"

	developmentOnly "org.springframework.boot:spring-boot-devtools:2.4.2"
	testRuntimeOnly "com.h2database:h2:"
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.4.2'
}

def buildDir = project.buildDir
def libsDir = "${buildDir}/libs"
def distributionDir = "${buildDir}/distribution"
def appDir = "${distributionDir}/app"
def appConfigDir = "${appDir}/config"

def dbDir = "${distributionDir}/db"
def dbDataDir = "${dbDir}/data"
def dbInitDir = "${dbDir}/init"

def jarArchiveName = "app.jar";

task copyClientDistToResources(type: Copy) {
	dependsOn processResources
	dependsOn ":client:generateClientDist"

	from "${project(':client:').projectDir}/dist"
	into "${buildDir}/resources/main/static"
}

bootJar {
	dependsOn copyClientDistToResources
	archiveFileName = jarArchiveName
}

task createDistDirHiearchy {
	dependsOn bootJar
	delete distributionDir
	mkdir distributionDir

	mkdir appDir
	mkdir appConfigDir

	mkdir dbDir
	mkdir dbDataDir
	mkdir dbInitDir
}

task copyFilesToDirHiearchy(type: Copy) {
	dependsOn createDistDirHiearchy

	copy { from "${libsDir}/${jarArchiveName}" into "${appDir}" }
	copy { from "${projectDir}/dockerfile" into "${appDir}" }

	copy {
		from "${projectDir}/config/logback.xml", "${projectDir}/config/application-prod.yml" into "${appDir}/config"
		rename { String fileName -> fileName.replace("-prod", "")}
	}
	copy { from "${projectDir}/db/database.sql" into "${dbInitDir}" }

	copy { from "${projectDir}/docker-compose.yml", "${projectDir}/.env" into "${distributionDir}" }
}


test {
	useJUnitPlatform()
}

